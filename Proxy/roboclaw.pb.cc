// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "roboclaw.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace amber {
namespace roboclaw_proto {

namespace {

const ::google::protobuf::Descriptor* MotorsSpeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MotorsSpeed_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_roboclaw_2eproto() {
  protobuf_AddDesc_roboclaw_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "roboclaw.proto");
  GOOGLE_CHECK(file != NULL);
  MotorsSpeed_descriptor_ = file->message_type(0);
  static const int MotorsSpeed_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotorsSpeed, frontleftspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotorsSpeed, frontrightspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotorsSpeed, rearleftspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotorsSpeed, rearrightspeed_),
  };
  MotorsSpeed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MotorsSpeed_descriptor_,
      MotorsSpeed::default_instance_,
      MotorsSpeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotorsSpeed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotorsSpeed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MotorsSpeed));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_roboclaw_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MotorsSpeed_descriptor_, &MotorsSpeed::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_roboclaw_2eproto() {
  delete MotorsSpeed::default_instance_;
  delete MotorsSpeed_reflection_;
}

void protobuf_AddDesc_roboclaw_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::amber::protobuf_AddDesc_drivermsg_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016roboclaw.proto\022\024amber.roboclaw_proto\032\017"
    "drivermsg.proto\"m\n\013MotorsSpeed\022\026\n\016frontL"
    "eftSpeed\030\001 \001(\005\022\027\n\017frontRightSpeed\030\002 \001(\005\022"
    "\025\n\rrearLeftSpeed\030\003 \001(\005\022\026\n\016rearRightSpeed"
    "\030\004 \001(\005:J\n\rmotorsCommand\022\020.amber.DriverMs"
    "g\030\024 \001(\0132!.amber.roboclaw_proto.MotorsSpe"
    "ed:-\n\023currentSpeedRequest\022\020.amber.Driver"
    "Msg\030\025 \001(\010:I\n\014currentSpeed\022\020.amber.Driver"
    "Msg\030\026 \001(\0132!.amber.roboclaw_proto.MotorsS"
    "peedB0\n\037pl.edu.agh.amber.roboclaw.protoB"
    "\rRoboclawProto", 414);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "roboclaw.proto", &protobuf_RegisterTypes);
  MotorsSpeed::default_instance_ = new MotorsSpeed();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::amber::DriverMsg::default_instance(),
    20, 11, false, false,
    &::amber::roboclaw_proto::MotorsSpeed::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::amber::DriverMsg::default_instance(),
    21, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::amber::DriverMsg::default_instance(),
    22, 11, false, false,
    &::amber::roboclaw_proto::MotorsSpeed::default_instance());
  MotorsSpeed::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_roboclaw_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_roboclaw_2eproto {
  StaticDescriptorInitializer_roboclaw_2eproto() {
    protobuf_AddDesc_roboclaw_2eproto();
  }
} static_descriptor_initializer_roboclaw_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int MotorsSpeed::kFrontLeftSpeedFieldNumber;
const int MotorsSpeed::kFrontRightSpeedFieldNumber;
const int MotorsSpeed::kRearLeftSpeedFieldNumber;
const int MotorsSpeed::kRearRightSpeedFieldNumber;
#endif  // !_MSC_VER

MotorsSpeed::MotorsSpeed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MotorsSpeed::InitAsDefaultInstance() {
}

MotorsSpeed::MotorsSpeed(const MotorsSpeed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MotorsSpeed::SharedCtor() {
  _cached_size_ = 0;
  frontleftspeed_ = 0;
  frontrightspeed_ = 0;
  rearleftspeed_ = 0;
  rearrightspeed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MotorsSpeed::~MotorsSpeed() {
  SharedDtor();
}

void MotorsSpeed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MotorsSpeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MotorsSpeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MotorsSpeed_descriptor_;
}

const MotorsSpeed& MotorsSpeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_roboclaw_2eproto();  return *default_instance_;
}

MotorsSpeed* MotorsSpeed::default_instance_ = NULL;

MotorsSpeed* MotorsSpeed::New() const {
  return new MotorsSpeed;
}

void MotorsSpeed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    frontleftspeed_ = 0;
    frontrightspeed_ = 0;
    rearleftspeed_ = 0;
    rearrightspeed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MotorsSpeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 frontLeftSpeed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frontleftspeed_)));
          set_has_frontleftspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_frontRightSpeed;
        break;
      }
      
      // optional int32 frontRightSpeed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frontRightSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frontrightspeed_)));
          set_has_frontrightspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rearLeftSpeed;
        break;
      }
      
      // optional int32 rearLeftSpeed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rearLeftSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rearleftspeed_)));
          set_has_rearleftspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rearRightSpeed;
        break;
      }
      
      // optional int32 rearRightSpeed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rearRightSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rearrightspeed_)));
          set_has_rearrightspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MotorsSpeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 frontLeftSpeed = 1;
  if (has_frontleftspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->frontleftspeed(), output);
  }
  
  // optional int32 frontRightSpeed = 2;
  if (has_frontrightspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frontrightspeed(), output);
  }
  
  // optional int32 rearLeftSpeed = 3;
  if (has_rearleftspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rearleftspeed(), output);
  }
  
  // optional int32 rearRightSpeed = 4;
  if (has_rearrightspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rearrightspeed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MotorsSpeed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 frontLeftSpeed = 1;
  if (has_frontleftspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->frontleftspeed(), target);
  }
  
  // optional int32 frontRightSpeed = 2;
  if (has_frontrightspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->frontrightspeed(), target);
  }
  
  // optional int32 rearLeftSpeed = 3;
  if (has_rearleftspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rearleftspeed(), target);
  }
  
  // optional int32 rearRightSpeed = 4;
  if (has_rearrightspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rearrightspeed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MotorsSpeed::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 frontLeftSpeed = 1;
    if (has_frontleftspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frontleftspeed());
    }
    
    // optional int32 frontRightSpeed = 2;
    if (has_frontrightspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frontrightspeed());
    }
    
    // optional int32 rearLeftSpeed = 3;
    if (has_rearleftspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rearleftspeed());
    }
    
    // optional int32 rearRightSpeed = 4;
    if (has_rearrightspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rearrightspeed());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MotorsSpeed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MotorsSpeed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MotorsSpeed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MotorsSpeed::MergeFrom(const MotorsSpeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frontleftspeed()) {
      set_frontleftspeed(from.frontleftspeed());
    }
    if (from.has_frontrightspeed()) {
      set_frontrightspeed(from.frontrightspeed());
    }
    if (from.has_rearleftspeed()) {
      set_rearleftspeed(from.rearleftspeed());
    }
    if (from.has_rearrightspeed()) {
      set_rearrightspeed(from.rearrightspeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MotorsSpeed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotorsSpeed::CopyFrom(const MotorsSpeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorsSpeed::IsInitialized() const {
  
  return true;
}

void MotorsSpeed::Swap(MotorsSpeed* other) {
  if (other != this) {
    std::swap(frontleftspeed_, other->frontleftspeed_);
    std::swap(frontrightspeed_, other->frontrightspeed_);
    std::swap(rearleftspeed_, other->rearleftspeed_);
    std::swap(rearrightspeed_, other->rearrightspeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MotorsSpeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MotorsSpeed_descriptor_;
  metadata.reflection = MotorsSpeed_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::amber::DriverMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::amber::roboclaw_proto::MotorsSpeed >, 11, false >
  motorsCommand(kMotorsCommandFieldNumber, ::amber::roboclaw_proto::MotorsSpeed::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::amber::DriverMsg,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  currentSpeedRequest(kCurrentSpeedRequestFieldNumber, false);
::google::protobuf::internal::ExtensionIdentifier< ::amber::DriverMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::amber::roboclaw_proto::MotorsSpeed >, 11, false >
  currentSpeed(kCurrentSpeedFieldNumber, ::amber::roboclaw_proto::MotorsSpeed::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace roboclaw_proto
}  // namespace amber

// @@protoc_insertion_point(global_scope)
