// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hokuyo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace amber {
namespace hokuyo_proto {

namespace {

const ::google::protobuf::Descriptor* Version_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Version_reflection_ = NULL;
const ::google::protobuf::Descriptor* Specs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Specs_reflection_ = NULL;
const ::google::protobuf::Descriptor* State_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  State_reflection_ = NULL;
const ::google::protobuf::Descriptor* Scan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Scan_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hokuyo_2eproto() {
  protobuf_AddDesc_hokuyo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hokuyo.proto");
  GOOGLE_CHECK(file != NULL);
  Version_descriptor_ = file->message_type(0);
  static const int Version_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, vendor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, product_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, firmware_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, serial_),
  };
  Version_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Version_descriptor_,
      Version::default_instance_,
      Version_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Version));
  Specs_descriptor_ = file->message_type(1);
  static const int Specs_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Specs, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Specs, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Specs, distance_minimum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Specs, distance_maximum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Specs, area_resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Specs, area_minimum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Specs, area_maximum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Specs, area_front_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Specs, motor_speed_),
  };
  Specs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Specs_descriptor_,
      Specs::default_instance_,
      Specs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Specs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Specs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Specs));
  State_descriptor_ = file->message_type(2);
  static const int State_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, laser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, motor_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, measure_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, bit_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, diagnostic_),
  };
  State_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      State_descriptor_,
      State::default_instance_,
      State_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(State, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(State));
  Scan_descriptor_ = file->message_type(3);
  static const int Scan_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, angles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, distances_),
  };
  Scan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Scan_descriptor_,
      Scan::default_instance_,
      Scan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Scan));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hokuyo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Version_descriptor_, &Version::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Specs_descriptor_, &Specs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    State_descriptor_, &State::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Scan_descriptor_, &Scan::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hokuyo_2eproto() {
  delete Version::default_instance_;
  delete Version_reflection_;
  delete Specs::default_instance_;
  delete Specs_reflection_;
  delete State::default_instance_;
  delete State_reflection_;
  delete Scan::default_instance_;
  delete Scan_reflection_;
}

void protobuf_AddDesc_hokuyo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::amber::protobuf_AddDesc_drivermsg_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014hokuyo.proto\022\022amber.hokuyo_proto\032\017driv"
    "ermsg.proto\"p\n\007Version\022\020\n\010response\030\001 \001(\t"
    "\022\016\n\006vendor\030\002 \001(\t\022\017\n\007product\030\003 \001(\t\022\020\n\010fir"
    "mware\030\004 \001(\t\022\020\n\010protocol\030\005 \001(\t\022\016\n\006serial\030"
    "\006 \001(\t\"\312\001\n\005Specs\022\020\n\010response\030\001 \001(\t\022\r\n\005mod"
    "el\030\002 \001(\t\022\030\n\020distance_minimum\030\003 \001(\r\022\030\n\020di"
    "stance_maximum\030\004 \001(\r\022\027\n\017area_resolution\030"
    "\005 \001(\r\022\024\n\014area_minimum\030\006 \001(\r\022\024\n\014area_maxi"
    "mum\030\007 \001(\r\022\022\n\narea_front\030\010 \001(\r\022\023\n\013motor_s"
    "peed\030\t \001(\r\"\226\001\n\005State\022\020\n\010response\030\001 \001(\t\022\r"
    "\n\005model\030\002 \001(\t\022\r\n\005laser\030\003 \001(\010\022\023\n\013motor_sp"
    "eed\030\004 \001(\t\022\024\n\014measure_mode\030\005 \001(\t\022\020\n\010bit_r"
    "ate\030\006 \001(\t\022\014\n\004time\030\007 \001(\t\022\022\n\ndiagnostic\030\010 "
    "\001(\t\"1\n\004Scan\022\022\n\006angles\030\001 \003(\001B\002\020\001\022\025\n\tdista"
    "nces\030\002 \003(\005B\002\020\001:*\n\020get_version_info\022\020.amb"
    "er.DriverMsg\030) \001(\010:*\n\020get_sensor_state\022\020"
    ".amber.DriverMsg\030* \001(\010:*\n\020get_sensor_spe"
    "cs\022\020.amber.DriverMsg\030+ \001(\010:)\n\017get_single"
    "_scan\022\020.amber.DriverMsg\030, \001(\010:>\n\007version"
    "\022\020.amber.DriverMsg\030- \001(\0132\033.amber.hokuyo_"
    "proto.Version::\n\005specs\022\020.amber.DriverMsg"
    "\030. \001(\0132\031.amber.hokuyo_proto.Specs::\n\005sta"
    "te\022\020.amber.DriverMsg\030/ \001(\0132\031.amber.hokuy"
    "o_proto.State:8\n\004scan\022\020.amber.DriverMsg\030"
    "0 \001(\0132\030.amber.hokuyo_proto.ScanB,\n\035pl.ed"
    "u.agh.amber.hokuyo.protoB\013HokuyoProto", 1037);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hokuyo.proto", &protobuf_RegisterTypes);
  Version::default_instance_ = new Version();
  Specs::default_instance_ = new Specs();
  State::default_instance_ = new State();
  Scan::default_instance_ = new Scan();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::amber::DriverMsg::default_instance(),
    41, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::amber::DriverMsg::default_instance(),
    42, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::amber::DriverMsg::default_instance(),
    43, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::amber::DriverMsg::default_instance(),
    44, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::amber::DriverMsg::default_instance(),
    45, 11, false, false,
    &::amber::hokuyo_proto::Version::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::amber::DriverMsg::default_instance(),
    46, 11, false, false,
    &::amber::hokuyo_proto::Specs::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::amber::DriverMsg::default_instance(),
    47, 11, false, false,
    &::amber::hokuyo_proto::State::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::amber::DriverMsg::default_instance(),
    48, 11, false, false,
    &::amber::hokuyo_proto::Scan::default_instance());
  Version::default_instance_->InitAsDefaultInstance();
  Specs::default_instance_->InitAsDefaultInstance();
  State::default_instance_->InitAsDefaultInstance();
  Scan::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hokuyo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hokuyo_2eproto {
  StaticDescriptorInitializer_hokuyo_2eproto() {
    protobuf_AddDesc_hokuyo_2eproto();
  }
} static_descriptor_initializer_hokuyo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Version::kResponseFieldNumber;
const int Version::kVendorFieldNumber;
const int Version::kProductFieldNumber;
const int Version::kFirmwareFieldNumber;
const int Version::kProtocolFieldNumber;
const int Version::kSerialFieldNumber;
#endif  // !_MSC_VER

Version::Version()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Version::InitAsDefaultInstance() {
}

Version::Version(const Version& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Version::SharedCtor() {
  _cached_size_ = 0;
  response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vendor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  product_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  firmware_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  protocol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serial_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Version::~Version() {
  SharedDtor();
}

void Version::SharedDtor() {
  if (response_ != &::google::protobuf::internal::kEmptyString) {
    delete response_;
  }
  if (vendor_ != &::google::protobuf::internal::kEmptyString) {
    delete vendor_;
  }
  if (product_ != &::google::protobuf::internal::kEmptyString) {
    delete product_;
  }
  if (firmware_ != &::google::protobuf::internal::kEmptyString) {
    delete firmware_;
  }
  if (protocol_ != &::google::protobuf::internal::kEmptyString) {
    delete protocol_;
  }
  if (serial_ != &::google::protobuf::internal::kEmptyString) {
    delete serial_;
  }
  if (this != default_instance_) {
  }
}

void Version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Version::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Version_descriptor_;
}

const Version& Version::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hokuyo_2eproto();  return *default_instance_;
}

Version* Version::default_instance_ = NULL;

Version* Version::New() const {
  return new Version;
}

void Version::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_response()) {
      if (response_ != &::google::protobuf::internal::kEmptyString) {
        response_->clear();
      }
    }
    if (has_vendor()) {
      if (vendor_ != &::google::protobuf::internal::kEmptyString) {
        vendor_->clear();
      }
    }
    if (has_product()) {
      if (product_ != &::google::protobuf::internal::kEmptyString) {
        product_->clear();
      }
    }
    if (has_firmware()) {
      if (firmware_ != &::google::protobuf::internal::kEmptyString) {
        firmware_->clear();
      }
    }
    if (has_protocol()) {
      if (protocol_ != &::google::protobuf::internal::kEmptyString) {
        protocol_->clear();
      }
    }
    if (has_serial()) {
      if (serial_ != &::google::protobuf::internal::kEmptyString) {
        serial_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string response = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->response().data(), this->response().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vendor;
        break;
      }
      
      // optional string vendor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vendor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->vendor().data(), this->vendor().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_product;
        break;
      }
      
      // optional string product = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->product().data(), this->product().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_firmware;
        break;
      }
      
      // optional string firmware = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_firmware:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firmware()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->firmware().data(), this->firmware().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_protocol;
        break;
      }
      
      // optional string protocol = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protocol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->protocol().data(), this->protocol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_serial;
        break;
      }
      
      // optional string serial = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serial().data(), this->serial().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string response = 1;
  if (has_response()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response().data(), this->response().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->response(), output);
  }
  
  // optional string vendor = 2;
  if (has_vendor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->vendor(), output);
  }
  
  // optional string product = 3;
  if (has_product()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->product().data(), this->product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->product(), output);
  }
  
  // optional string firmware = 4;
  if (has_firmware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->firmware().data(), this->firmware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->firmware(), output);
  }
  
  // optional string protocol = 5;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->protocol(), output);
  }
  
  // optional string serial = 6;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serial().data(), this->serial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->serial(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Version::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string response = 1;
  if (has_response()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response().data(), this->response().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->response(), target);
  }
  
  // optional string vendor = 2;
  if (has_vendor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->vendor(), target);
  }
  
  // optional string product = 3;
  if (has_product()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->product().data(), this->product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->product(), target);
  }
  
  // optional string firmware = 4;
  if (has_firmware()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->firmware().data(), this->firmware().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->firmware(), target);
  }
  
  // optional string protocol = 5;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->protocol(), target);
  }
  
  // optional string serial = 6;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serial().data(), this->serial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->serial(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Version::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response());
    }
    
    // optional string vendor = 2;
    if (has_vendor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vendor());
    }
    
    // optional string product = 3;
    if (has_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product());
    }
    
    // optional string firmware = 4;
    if (has_firmware()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firmware());
    }
    
    // optional string protocol = 5;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocol());
    }
    
    // optional string serial = 6;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Version::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Version* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Version*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Version::MergeFrom(const Version& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      set_response(from.response());
    }
    if (from.has_vendor()) {
      set_vendor(from.vendor());
    }
    if (from.has_product()) {
      set_product(from.product());
    }
    if (from.has_firmware()) {
      set_firmware(from.firmware());
    }
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
    if (from.has_serial()) {
      set_serial(from.serial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Version::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Version::CopyFrom(const Version& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  
  return true;
}

void Version::Swap(Version* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(vendor_, other->vendor_);
    std::swap(product_, other->product_);
    std::swap(firmware_, other->firmware_);
    std::swap(protocol_, other->protocol_);
    std::swap(serial_, other->serial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Version::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Version_descriptor_;
  metadata.reflection = Version_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Specs::kResponseFieldNumber;
const int Specs::kModelFieldNumber;
const int Specs::kDistanceMinimumFieldNumber;
const int Specs::kDistanceMaximumFieldNumber;
const int Specs::kAreaResolutionFieldNumber;
const int Specs::kAreaMinimumFieldNumber;
const int Specs::kAreaMaximumFieldNumber;
const int Specs::kAreaFrontFieldNumber;
const int Specs::kMotorSpeedFieldNumber;
#endif  // !_MSC_VER

Specs::Specs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Specs::InitAsDefaultInstance() {
}

Specs::Specs(const Specs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Specs::SharedCtor() {
  _cached_size_ = 0;
  response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  distance_minimum_ = 0u;
  distance_maximum_ = 0u;
  area_resolution_ = 0u;
  area_minimum_ = 0u;
  area_maximum_ = 0u;
  area_front_ = 0u;
  motor_speed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Specs::~Specs() {
  SharedDtor();
}

void Specs::SharedDtor() {
  if (response_ != &::google::protobuf::internal::kEmptyString) {
    delete response_;
  }
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    delete model_;
  }
  if (this != default_instance_) {
  }
}

void Specs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Specs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Specs_descriptor_;
}

const Specs& Specs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hokuyo_2eproto();  return *default_instance_;
}

Specs* Specs::default_instance_ = NULL;

Specs* Specs::New() const {
  return new Specs;
}

void Specs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_response()) {
      if (response_ != &::google::protobuf::internal::kEmptyString) {
        response_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::kEmptyString) {
        model_->clear();
      }
    }
    distance_minimum_ = 0u;
    distance_maximum_ = 0u;
    area_resolution_ = 0u;
    area_minimum_ = 0u;
    area_maximum_ = 0u;
    area_front_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    motor_speed_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Specs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string response = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->response().data(), this->response().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_model;
        break;
      }
      
      // optional string model = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_distance_minimum;
        break;
      }
      
      // optional uint32 distance_minimum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_distance_minimum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &distance_minimum_)));
          set_has_distance_minimum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_distance_maximum;
        break;
      }
      
      // optional uint32 distance_maximum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_distance_maximum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &distance_maximum_)));
          set_has_distance_maximum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_area_resolution;
        break;
      }
      
      // optional uint32 area_resolution = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_resolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_resolution_)));
          set_has_area_resolution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_area_minimum;
        break;
      }
      
      // optional uint32 area_minimum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_minimum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_minimum_)));
          set_has_area_minimum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_area_maximum;
        break;
      }
      
      // optional uint32 area_maximum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_maximum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_maximum_)));
          set_has_area_maximum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_area_front;
        break;
      }
      
      // optional uint32 area_front = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_front:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_front_)));
          set_has_area_front();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_motor_speed;
        break;
      }
      
      // optional uint32 motor_speed = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_motor_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &motor_speed_)));
          set_has_motor_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Specs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string response = 1;
  if (has_response()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response().data(), this->response().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->response(), output);
  }
  
  // optional string model = 2;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->model(), output);
  }
  
  // optional uint32 distance_minimum = 3;
  if (has_distance_minimum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->distance_minimum(), output);
  }
  
  // optional uint32 distance_maximum = 4;
  if (has_distance_maximum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->distance_maximum(), output);
  }
  
  // optional uint32 area_resolution = 5;
  if (has_area_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->area_resolution(), output);
  }
  
  // optional uint32 area_minimum = 6;
  if (has_area_minimum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->area_minimum(), output);
  }
  
  // optional uint32 area_maximum = 7;
  if (has_area_maximum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->area_maximum(), output);
  }
  
  // optional uint32 area_front = 8;
  if (has_area_front()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->area_front(), output);
  }
  
  // optional uint32 motor_speed = 9;
  if (has_motor_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->motor_speed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Specs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string response = 1;
  if (has_response()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response().data(), this->response().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->response(), target);
  }
  
  // optional string model = 2;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->model(), target);
  }
  
  // optional uint32 distance_minimum = 3;
  if (has_distance_minimum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->distance_minimum(), target);
  }
  
  // optional uint32 distance_maximum = 4;
  if (has_distance_maximum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->distance_maximum(), target);
  }
  
  // optional uint32 area_resolution = 5;
  if (has_area_resolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->area_resolution(), target);
  }
  
  // optional uint32 area_minimum = 6;
  if (has_area_minimum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->area_minimum(), target);
  }
  
  // optional uint32 area_maximum = 7;
  if (has_area_maximum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->area_maximum(), target);
  }
  
  // optional uint32 area_front = 8;
  if (has_area_front()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->area_front(), target);
  }
  
  // optional uint32 motor_speed = 9;
  if (has_motor_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->motor_speed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Specs::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response());
    }
    
    // optional string model = 2;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }
    
    // optional uint32 distance_minimum = 3;
    if (has_distance_minimum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->distance_minimum());
    }
    
    // optional uint32 distance_maximum = 4;
    if (has_distance_maximum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->distance_maximum());
    }
    
    // optional uint32 area_resolution = 5;
    if (has_area_resolution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_resolution());
    }
    
    // optional uint32 area_minimum = 6;
    if (has_area_minimum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_minimum());
    }
    
    // optional uint32 area_maximum = 7;
    if (has_area_maximum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_maximum());
    }
    
    // optional uint32 area_front = 8;
    if (has_area_front()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_front());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 motor_speed = 9;
    if (has_motor_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->motor_speed());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Specs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Specs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Specs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Specs::MergeFrom(const Specs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      set_response(from.response());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_distance_minimum()) {
      set_distance_minimum(from.distance_minimum());
    }
    if (from.has_distance_maximum()) {
      set_distance_maximum(from.distance_maximum());
    }
    if (from.has_area_resolution()) {
      set_area_resolution(from.area_resolution());
    }
    if (from.has_area_minimum()) {
      set_area_minimum(from.area_minimum());
    }
    if (from.has_area_maximum()) {
      set_area_maximum(from.area_maximum());
    }
    if (from.has_area_front()) {
      set_area_front(from.area_front());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_motor_speed()) {
      set_motor_speed(from.motor_speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Specs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Specs::CopyFrom(const Specs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Specs::IsInitialized() const {
  
  return true;
}

void Specs::Swap(Specs* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(model_, other->model_);
    std::swap(distance_minimum_, other->distance_minimum_);
    std::swap(distance_maximum_, other->distance_maximum_);
    std::swap(area_resolution_, other->area_resolution_);
    std::swap(area_minimum_, other->area_minimum_);
    std::swap(area_maximum_, other->area_maximum_);
    std::swap(area_front_, other->area_front_);
    std::swap(motor_speed_, other->motor_speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Specs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Specs_descriptor_;
  metadata.reflection = Specs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int State::kResponseFieldNumber;
const int State::kModelFieldNumber;
const int State::kLaserFieldNumber;
const int State::kMotorSpeedFieldNumber;
const int State::kMeasureModeFieldNumber;
const int State::kBitRateFieldNumber;
const int State::kTimeFieldNumber;
const int State::kDiagnosticFieldNumber;
#endif  // !_MSC_VER

State::State()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void State::InitAsDefaultInstance() {
}

State::State(const State& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void State::SharedCtor() {
  _cached_size_ = 0;
  response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  laser_ = false;
  motor_speed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  measure_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bit_rate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  diagnostic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

State::~State() {
  SharedDtor();
}

void State::SharedDtor() {
  if (response_ != &::google::protobuf::internal::kEmptyString) {
    delete response_;
  }
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    delete model_;
  }
  if (motor_speed_ != &::google::protobuf::internal::kEmptyString) {
    delete motor_speed_;
  }
  if (measure_mode_ != &::google::protobuf::internal::kEmptyString) {
    delete measure_mode_;
  }
  if (bit_rate_ != &::google::protobuf::internal::kEmptyString) {
    delete bit_rate_;
  }
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (diagnostic_ != &::google::protobuf::internal::kEmptyString) {
    delete diagnostic_;
  }
  if (this != default_instance_) {
  }
}

void State::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* State::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return State_descriptor_;
}

const State& State::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hokuyo_2eproto();  return *default_instance_;
}

State* State::default_instance_ = NULL;

State* State::New() const {
  return new State;
}

void State::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_response()) {
      if (response_ != &::google::protobuf::internal::kEmptyString) {
        response_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::kEmptyString) {
        model_->clear();
      }
    }
    laser_ = false;
    if (has_motor_speed()) {
      if (motor_speed_ != &::google::protobuf::internal::kEmptyString) {
        motor_speed_->clear();
      }
    }
    if (has_measure_mode()) {
      if (measure_mode_ != &::google::protobuf::internal::kEmptyString) {
        measure_mode_->clear();
      }
    }
    if (has_bit_rate()) {
      if (bit_rate_ != &::google::protobuf::internal::kEmptyString) {
        bit_rate_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
    if (has_diagnostic()) {
      if (diagnostic_ != &::google::protobuf::internal::kEmptyString) {
        diagnostic_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool State::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string response = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->response().data(), this->response().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_model;
        break;
      }
      
      // optional string model = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_laser;
        break;
      }
      
      // optional bool laser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_laser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &laser_)));
          set_has_laser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_motor_speed;
        break;
      }
      
      // optional string motor_speed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_motor_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_motor_speed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->motor_speed().data(), this->motor_speed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_measure_mode;
        break;
      }
      
      // optional string measure_mode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_measure_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_measure_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->measure_mode().data(), this->measure_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bit_rate;
        break;
      }
      
      // optional string bit_rate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bit_rate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bit_rate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bit_rate().data(), this->bit_rate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_time;
        break;
      }
      
      // optional string time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_diagnostic;
        break;
      }
      
      // optional string diagnostic = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diagnostic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diagnostic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->diagnostic().data(), this->diagnostic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void State::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string response = 1;
  if (has_response()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response().data(), this->response().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->response(), output);
  }
  
  // optional string model = 2;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->model(), output);
  }
  
  // optional bool laser = 3;
  if (has_laser()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->laser(), output);
  }
  
  // optional string motor_speed = 4;
  if (has_motor_speed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->motor_speed().data(), this->motor_speed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->motor_speed(), output);
  }
  
  // optional string measure_mode = 5;
  if (has_measure_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->measure_mode().data(), this->measure_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->measure_mode(), output);
  }
  
  // optional string bit_rate = 6;
  if (has_bit_rate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bit_rate().data(), this->bit_rate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->bit_rate(), output);
  }
  
  // optional string time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->time(), output);
  }
  
  // optional string diagnostic = 8;
  if (has_diagnostic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diagnostic().data(), this->diagnostic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->diagnostic(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* State::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string response = 1;
  if (has_response()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response().data(), this->response().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->response(), target);
  }
  
  // optional string model = 2;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->model(), target);
  }
  
  // optional bool laser = 3;
  if (has_laser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->laser(), target);
  }
  
  // optional string motor_speed = 4;
  if (has_motor_speed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->motor_speed().data(), this->motor_speed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->motor_speed(), target);
  }
  
  // optional string measure_mode = 5;
  if (has_measure_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->measure_mode().data(), this->measure_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->measure_mode(), target);
  }
  
  // optional string bit_rate = 6;
  if (has_bit_rate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bit_rate().data(), this->bit_rate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bit_rate(), target);
  }
  
  // optional string time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->time(), target);
  }
  
  // optional string diagnostic = 8;
  if (has_diagnostic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diagnostic().data(), this->diagnostic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->diagnostic(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int State::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response());
    }
    
    // optional string model = 2;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }
    
    // optional bool laser = 3;
    if (has_laser()) {
      total_size += 1 + 1;
    }
    
    // optional string motor_speed = 4;
    if (has_motor_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->motor_speed());
    }
    
    // optional string measure_mode = 5;
    if (has_measure_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->measure_mode());
    }
    
    // optional string bit_rate = 6;
    if (has_bit_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bit_rate());
    }
    
    // optional string time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }
    
    // optional string diagnostic = 8;
    if (has_diagnostic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->diagnostic());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void State::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const State* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const State*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response()) {
      set_response(from.response());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_laser()) {
      set_laser(from.laser());
    }
    if (from.has_motor_speed()) {
      set_motor_speed(from.motor_speed());
    }
    if (from.has_measure_mode()) {
      set_measure_mode(from.measure_mode());
    }
    if (from.has_bit_rate()) {
      set_bit_rate(from.bit_rate());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_diagnostic()) {
      set_diagnostic(from.diagnostic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void State::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  
  return true;
}

void State::Swap(State* other) {
  if (other != this) {
    std::swap(response_, other->response_);
    std::swap(model_, other->model_);
    std::swap(laser_, other->laser_);
    std::swap(motor_speed_, other->motor_speed_);
    std::swap(measure_mode_, other->measure_mode_);
    std::swap(bit_rate_, other->bit_rate_);
    std::swap(time_, other->time_);
    std::swap(diagnostic_, other->diagnostic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata State::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = State_descriptor_;
  metadata.reflection = State_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Scan::kAnglesFieldNumber;
const int Scan::kDistancesFieldNumber;
#endif  // !_MSC_VER

Scan::Scan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Scan::InitAsDefaultInstance() {
}

Scan::Scan(const Scan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Scan::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Scan::~Scan() {
  SharedDtor();
}

void Scan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Scan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scan_descriptor_;
}

const Scan& Scan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hokuyo_2eproto();  return *default_instance_;
}

Scan* Scan::default_instance_ = NULL;

Scan* Scan::New() const {
  return new Scan;
}

void Scan::Clear() {
  angles_.Clear();
  distances_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Scan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double angles = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_angles())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10, input, this->mutable_angles())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_distances;
        break;
      }
      
      // repeated int32 distances = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_distances:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_distances())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_distances())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Scan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double angles = 1 [packed = true];
  if (this->angles_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_angles_cached_byte_size_);
  }
  for (int i = 0; i < this->angles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->angles(i), output);
  }
  
  // repeated int32 distances = 2 [packed = true];
  if (this->distances_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_distances_cached_byte_size_);
  }
  for (int i = 0; i < this->distances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->distances(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Scan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double angles = 1 [packed = true];
  if (this->angles_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _angles_cached_byte_size_, target);
  }
  for (int i = 0; i < this->angles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->angles(i), target);
  }
  
  // repeated int32 distances = 2 [packed = true];
  if (this->distances_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _distances_cached_byte_size_, target);
  }
  for (int i = 0; i < this->distances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->distances(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Scan::ByteSize() const {
  int total_size = 0;
  
  // repeated double angles = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->angles_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _angles_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated int32 distances = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->distances_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->distances(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _distances_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Scan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Scan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Scan::MergeFrom(const Scan& from) {
  GOOGLE_CHECK_NE(&from, this);
  angles_.MergeFrom(from.angles_);
  distances_.MergeFrom(from.distances_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Scan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scan::CopyFrom(const Scan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scan::IsInitialized() const {
  
  return true;
}

void Scan::Swap(Scan* other) {
  if (other != this) {
    angles_.Swap(&other->angles_);
    distances_.Swap(&other->distances_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Scan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Scan_descriptor_;
  metadata.reflection = Scan_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::amber::DriverMsg,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  get_version_info(kGetVersionInfoFieldNumber, false);
::google::protobuf::internal::ExtensionIdentifier< ::amber::DriverMsg,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  get_sensor_state(kGetSensorStateFieldNumber, false);
::google::protobuf::internal::ExtensionIdentifier< ::amber::DriverMsg,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  get_sensor_specs(kGetSensorSpecsFieldNumber, false);
::google::protobuf::internal::ExtensionIdentifier< ::amber::DriverMsg,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  get_single_scan(kGetSingleScanFieldNumber, false);
::google::protobuf::internal::ExtensionIdentifier< ::amber::DriverMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::amber::hokuyo_proto::Version >, 11, false >
  version(kVersionFieldNumber, ::amber::hokuyo_proto::Version::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::amber::DriverMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::amber::hokuyo_proto::Specs >, 11, false >
  specs(kSpecsFieldNumber, ::amber::hokuyo_proto::Specs::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::amber::DriverMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::amber::hokuyo_proto::State >, 11, false >
  state(kStateFieldNumber, ::amber::hokuyo_proto::State::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::amber::DriverMsg,
    ::google::protobuf::internal::MessageTypeTraits< ::amber::hokuyo_proto::Scan >, 11, false >
  scan(kScanFieldNumber, ::amber::hokuyo_proto::Scan::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace hokuyo_proto
}  // namespace amber

// @@protoc_insertion_point(global_scope)
